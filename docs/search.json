[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KUT 統計学1",
    "section": "",
    "text": "1 はじめに\nこれは、高知工科大学 経済・マネジメント学群で開講されている「統計学1」（担当：矢内勇生）の講義用資料である。"
  },
  {
    "objectID": "index.html#sec-basicinfo",
    "href": "index.html#sec-basicinfo",
    "title": "KUT 統計学1",
    "section": "1.1 基本情報",
    "text": "1.1 基本情報\n\nシラバス（講義要項）：PDF\n講義スライド\n\n　各授業（講義動画公開）の後に最新版をアップロードする\n　講義動画は KUTLMS で配布する\n\n\n\n\n\n\n\n\n注意\n\n\n\n一般公開用のスライドでは一部の情報がカットされているので、正規受講生（単位を取得したい者）は KUTLMS で完全版を入手すること\n\n\n\nKUTLMS\n\n登録キーはポータルで通知する\n\n授業用のSlackグループ\n\n登録 には大学ドメイン のメールアドレスが必要"
  },
  {
    "objectID": "index.html#sec-refs",
    "href": "index.html#sec-refs",
    "title": "KUT 統計学1",
    "section": "1.2 教科書・副読本",
    "text": "1.2 教科書・副読本\n\n1.2.1 教科書\n\n浅野正彦, 矢内勇生. 2018.『Rによる計量政治学』オーム社（サポートページ）\n\n\n\n\n1.2.2 副読本\n\n宋財泫, 矢内勇生 （執筆中）『私たちのR：ベストプラクティスの探求』(web book、無料)"
  },
  {
    "objectID": "index.html#sec-topics",
    "href": "index.html#sec-topics",
    "title": "KUT 統計学1",
    "section": "1.3 講義トピックとウェブ資料の対応",
    "text": "1.3 講義トピックとウェブ資料の対応\n授業の内容は、8つのトピックに分かれている。シラバス (PDF) にはトピックごとの予習課題と参考文献が記載されている。 各トピックとこのウェブ資料の対応は以下の通りである。\n\n\n\nトピック\nウェブ資料\n\n\n\n\n1. イントロダクション\n\n\n\n2. Rの基本操作\nRの基本操作\n\n\n\nRStudio入門\n\n\n3. データの種類と記述統計\n記述統計\n\n\n\nggplot2入門\n\n\n\nQuarto入門\n\n\n4. 離散分布\n離散分布\n\n\n5. 連続分布\n連続分布\n\n\n6. 確率変数と確率分布.\n確率変数と確率分布\n\n\n7. 分布の代表値\n分布の代表値\n\n\n8. まとめ\nなし\n\n\n\n\n\n\n\n\n\n注意\n\n\n\n一部の例外を除いて、各ページ（各章）の内容を実行するために必要なパッケージはページの冒頭で読み込むことにする。ページの途中から実行しても動かないことがあると思われるので、その際はページの最初から実行してほしい。\n各ページは（パッケージのインストールとデータファイルの入手を除き）独立なので、ページ単位で実行することができる。"
  },
  {
    "objectID": "intro-to-R.html#sec-rbasic",
    "href": "intro-to-R.html#sec-rbasic",
    "title": "\n2  Rの基本操作\n",
    "section": "\n2.1 Rの基礎",
    "text": "2.1 Rの基礎\nRのコードはRのConsoleに直接入力してもよいし、スクリプトに保存してRから呼び出してもよい。スクリプトを使うときは、スクリプトファイルをfile_name.R のように .R ファイルとして保存する。そして、RのConsole で source(\"file_name.R\") とすれば、スクリプト全体が実行される。\n\n\n\n\n\n\n重要\n\n\n\nこの資料にあるコードは簡単にコピーすることができる。それをR (RStduio) にペーストすれば（貼り付ければ）コマンドを実行することができる。 しかし、そのような方法ではなかなかコマンドを覚えることができないだろう。\nRのコマンドは、自らの手でタイプすることを強く勧める。プログラミングを身につけるためには、自分でプログラムを「書く」ことが必要である。\n\n\nRコマンドの区切りは改行である。改行すれば、1つのコマンドが終了したと認識される。\n\n35 + 87\n\n[1] 122\n\n\nただし、括弧が閉じていなかったり、行末に二項演算子 (+ や * など) があるときは、コマンドが次の行まで続いていると認識される。\n\n35 +\n    87\n\n[1] 122\n\n\n1行に複数のコマンドを書きたいときは ; で区切る。\n\n35 + 87; 25 * 4\n\n[1] 122\n\n\n[1] 100\n\n\n\n\n\n\n\n\nヒント\n\n\n\nこの資料のRコマンドを読むときは、どこにスペースがあるかに注意し、自分で書く際も（少なくともはじめのうちは）それを真似するようにしよう。たとえば、上のコマンドの最初の足し算は、35+87 ではなく、35 + 87 と書かれている。\n\n\n通常は、1行に1つのコマンドを書くようにしよう。\nRは大文字と小文字を区別する。したがって、Var1 と var1 は異なるモノ（変数、オブジェクト）として認識される。 変数名は英数字と_ [アンダースコア] のみで構成するべきである（日本語も使えるが、トラブルの元なので避けるべき）。ただし、頭文字に数字は使えない。\n半角スペースは1つ以上ならいくつあっても1つの半角スペースがある場合と同じである。また、演算子の前後の半角スペースはあってもなくてもよい（コードの読み易さを考えてスペースの有無を決めること）。\n\n\n\n\n\n\n重要\n\n\n\nコード中のスペースは半角スペースでなければならない。日本語入力で使うスペースは全角スペースだが、全角スペースがあるとコードが正しく動作しないので要注意。プログラミングの際には日本語入力が「オフ」になっていることを確認しよう。\n\n\n#[ハッシュ] はコメントの開始として扱われる。 行頭に# を書くと、その行すべてがコメントとして扱われる。\n\n# 2 * 4  # 行頭からすべてコメント \n\n行の途中に# を書くと、# 以降がコメントとして扱われる。\n\n2 * 4  # これはコメント\n\n[1] 8\n\n\nコメントを書く作業は、コマンドを書く作業と同様に大切である。詳しくは授業で説明する。\nRに用意されている関数の使い方についてヘルプを参照したいときは?関数名 （またはhelp(関数名))　とする。たとえば、平均値を求める関数 mean() のヘルプは、\n\n?mean\n\nで確認できる。ウェブブラウザでヘルプを参照したいときは、help.start() とする。\nインストール済みのパッケージを利用するときは、library(パッケージ名) とする。たとえば、ggplot2 パッケージを使いたいなら、\n\nlibrary(ggplot2)\n\nとする。パッケージをインストールする際は、install.packages(\"パッケージ名\") とする。その際、どのレポジトリからダウンロードするか尋ねられるので、自分に一番近いところ選ぶ。（パッケージをインストールする度にレポジトリを指定するのが面倒なら、.Rprofile であらかじめレポジトリを指定しておく。）\n\n2.1.1 Rを電卓代わりに使う\nRは電卓の代わりとして使うことができる。 たとえば、\n\n1 + 1       # 足し算\n\n[1] 2\n\n100 - 20    # 引き算\n\n[1] 80\n\n5 * 8       # 掛け算\n\n[1] 40\n\n2 / 3       # 割り算\n\n[1] 0.6666667\n\n2 ^ 3       # 累乗\n\n[1] 8\n\nsqrt(2)     # 平方根\n\n[1] 1.414214\n\n2 ^ (1 / 2) # sqrt(2) と同じ\n\n[1] 1.414214\n\n\nなどの計算ができる。 計算の順番を指定するときは、() で囲めばよい。\n\n(5 * (2 + 1)) ^ 3  # (2 + 1) を最初に計算し、それに5を掛けてから最後に三乗する\n\n[1] 3375\n\n\n\n2.1.2 変数の利用\nRでは、変数（正確にはオブジェクト）を（ある程度）自由に作ることができる。 変数の名前は自由に決めてよい（ただし、数字から始まる名前はダメ。また、- [ハイフン] はマイナスと区別できないので使えない）。 たとえば、\n\na <- 1\nb <- 2\n\nとすると、a, b という2つの変数ができる。ここで <- は変数に値を割り当てることを意味する。 （<- の代わりに= を使うこともできるが混乱の元になるので、変数を定義するときは常に<- を使うことにする。）\n<- はショートカットキーを使って入力する。\n\nmacOS: option + -（option キーと -[マイナス] キーを同時に押す）\nWindows: Alt + -（Alt キーと - [マイナス] キーを同時に押す）\n\nこうすることで、 <- だけでなく、その前後に半角スペースが1つずつ挿入されるので便利である。つまり、順番に\n\na\n\noption + - または Alt + -\n\n1\n\nと打つと\n\na <- 1\n\nと入力される。ショートカットキーを使わないと、\n\na\nSPACE\n<\n-\nSPACE\n1\n\nと6段階の入力が必要になる。ショートカットキーを使うことで、これを3回に短縮できる。\n定義された変数名のみを入力して実行すると、変数の中身が表示される。\n\na\n\n[1] 1\n\nb\n\n[1] 2\n\n\nこの変数は、計算に使える。\n\na + b\n\n[1] 3\n\na - b\n\n[1] -1\n\na * b\n\n[1] 2\n\na / b\n\n[1] 0.5\n\nb ^ a\n\n[1] 2\n\n\nまた、\n\nd <- a\na <- 3\n\nとすると、\\(d = 1\\), \\(a = 3\\) となる（各自確かめること）。\nまた、変数名には日本語も使える。 たとえば、\n\n変数1 <- 5\n変数2 <- 7\n変数1 * 変数2\n\n[1] 35\n\n\nとすることも可能である。しかし、変数名に日本語を使うと、（1）英語/日本語の切り替えが面倒であり、（2）文字化け等の予期せぬ問題が生じることがあるので、なるべく日本語の変数名は使わないほうが無難である。\n変数の割当と画面への出力を同時に行いたいときは、全体を () で囲む。\n\n(d <- 3 * 5)\n\n[1] 15\n\n\n変数を消去したいときはrm() 関数を使う。\n\nrm(d)\n\n\n2.1.3 ベクトルと行列\n\n2.1.3.1 ベクトル (vectors)\nRで特定のベクトル (vector) を作りたいときは、c() を（combine; 結合する）使う （上での変数を作るときにc という名前をスキップしたのは、この cという名前の関数があるためだった）。 たとえば、1, 2, 3, 4, 5 という5つの数字からなるベクトル a を作るには、\n\na <- c(1, 2, 3, 4, 5)\n\nとする。このベクトルを画面に表示すると、\n\na\n\n[1] 1 2 3 4 5\n\n\nとなる。\nベクトルの中身は文字列でもかまわない。 たとえば、\n\nuniv_kochi <- c(\"KUT\", \"University of Kochi\", \"Kochi University\")\n\nとすれば、文字列 (characters) のベクトルができる。 このように、文字列は引用符（'' でも\"\" でもよい）で囲む。\nひとつひとつの要素を指定する代わりに、様々な方法でベクトルを作ることが可能である。 たとえば、seq() 関数（sequence; 数列）を使うと、一連の数字からなるベクトルを作ることができる。\n\nseq(1, 20, by = 1)   # 1から20までの整数。1:20 でも同じ\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nseq(1, 20, by = 2)   # 1から19までの奇数\n\n [1]  1  3  5  7  9 11 13 15 17 19\n\nseq(2, 20, by = 2)   # 2から20までの偶数\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nseq(20, 1, by = -5)  # 降順、間隔は5\n\n[1] 20 15 10  5\n\nseq(1, 100, length.out = 10) # 最小値が1、最大値が100で、要素の数 (length) が10のベクトル\n\n [1]   1  12  23  34  45  56  67  78  89 100\n\n\nseq(x, y, by = 1) の場合はより単純に x : yとすればよい。\n\n1 : 20\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\nまた、rep()関数（replicate; 複製する）も便利である。\n\nrep(3, 10)   # 3が10個のベクトル\n\n [1] 3 3 3 3 3 3 3 3 3 3\n\nrep(c(\"a\", \"b\", \"c\"), c(3, 1, 2))  # aが3つ, bが1つ, cが2つのベクトル\n\n[1] \"a\" \"a\" \"a\" \"b\" \"c\" \"c\"\n\n\nベクトルの\\(i\\)番目の要素にアクセスするにはベクトル名[i]とする。 同時に複数の要素を取り出すこともできる。 たとえば、\n\na <- seq(10, 100, length.out = 10)\nb <- 10:1\na[2]\n\n[1] 20\n\nb[2]\n\n[1] 9\n\na[3:5]\n\n[1] 30 40 50\n\na[c(1,3,5)]\n\n[1] 10 30 50\n\na[c(8, 2, 4)]\n\n[1] 80 20 40\n\n\n\n2.1.3.2 ベクトルの演算\nRでは、ベクトルを使った演算が可能である。 たとえば、次のような計算ができる。\n\nx <- 1 : 10\nx + 10    # ベクトルxの各要素に10を加える\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\nx - 5     # ベクトルxの各要素から5を引く\n\n [1] -4 -3 -2 -1  0  1  2  3  4  5\n\nx * 2     # ベクトルxの各要素に2をかける\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nx / 3     # ベクトルxの各要素を3で割る\n\n [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333\n [8] 2.6666667 3.0000000 3.3333333\n\nx ^ 2     # ベクトルxの各要素を2乗する\n\n [1]   1   4   9  16  25  36  49  64  81 100\n\nsqrt(x)   # ベクトルxの各要素の平方根（square root）を計算する\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\n\nまた、複数のベクトルを使って、次のような計算ができる。\n\nx <- 1:10\ny <- -10:-1\n\n# xのi番目の要素とyのi番目の要素を足す（i = 1, 2, ..., 10）\nx + y\n\n [1] -9 -7 -5 -3 -1  1  3  5  7  9\n\n# xのi番目の要素からyのi番目の要素を引く（i = 1, 2, ..., 10）\nx - y\n\n [1] 11 11 11 11 11 11 11 11 11 11\n\n# xのi番目の要素とyのi番目の要素をかける（i = 1, 2, ..., 10）\nx * y\n\n [1] -10 -18 -24 -28 -30 -30 -28 -24 -18 -10\n\n# xのi番目の要素をyのi番目の要素で割る（i = 1, 2, ..., 10）\nx / y\n\n [1]  -0.1000000  -0.2222222  -0.3750000  -0.5714286  -0.8333333  -1.2000000\n [7]  -1.7500000  -2.6666667  -4.5000000 -10.0000000\n\n# xのi番目の要素を「yのi番目の要素」乗にする（i = 1, 2, ..., 10）\nx ^ y\n\n [1] 1.000000e+00 1.953125e-03 1.524158e-04 6.103516e-05 6.400000e-05\n [6] 1.286008e-04 4.164931e-04 1.953125e-03 1.234568e-02 1.000000e-01\n\n\nベクトル同士の足し算（引き算）をしても、ベクトルの長さは変わらない。\n\nlength(x)\n\n[1] 10\n\nlength(y)\n\n[1] 10\n\nlength(x + y)\n\n[1] 10\n\n\n長さの異なるベクトルを使って演算を行うと、短いのほうのベクトルは要素をリサイクルして対応する。\n\nx <- 1 : 10\ny <- c(100, 200)\nx + y\n\n [1] 101 202 103 204 105 206 107 208 109 210\n\n\nただし、長いほうのベクトルの長さが短いほうのベクトルの長さの整数倍になっていないときは、警告 (warning) が出る。\n\nx <- 1 : 10\ny <- c(100, 200, 300)\nx + y\n\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n\n\n [1] 101 202 303 104 205 306 107 208 309 110\n\n\n2つのベクトルの内積 (dot product) は%*% で、直積 (outer product) は%o% またはouter() で求められる。\nx <- c(1, 3, 5)\ny <- c(10, 20, 30)\nx %*% y      # xとyの内積\nx %o% y      # xとyの直積\nouter(x, y)  # xとyの直積\n\n\n2.1.3.3 行列 (matrices)\nRで行列を作るには、matrix()関数を使う。 たとえば、\n\n(A <- matrix(1 : 9, nrow = 3, byrow = TRUE))\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n(B <- matrix(1 : 9, nrow = 3, byrow = FALSE))\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nのようにする。 ここで、行列Aと行列Bの違いに注目しよう。 要素全体をひとつの集合としてみると、AとBの行列は全く同じである。 これは、上のコードでは1 : 9という部分が同じだからである。 しかし、要素の並び方が異なる。 Aを作ったコードはbyrow = TRUEとなっている。 これは、行 (row) 単位でセルを埋めて行くということである。 それに対し、Bではbyrow = FALSE となっている。 これは行単位でセルを埋めない（したがって、列 [col] 単位で埋める）ということを意味する。 この違いが、AとBの違いを生み出している。 行列を作るときは行数 nrow と列数 ncol を指定するが、要素の合計数が決まっているときは、どちらか一方を指定すれば、もう一方は自動的に決められる。 上の例では、要素の数が9で、行の数に3を指定したので、列の数は自動的に 9 / 3 = 3 になっている。\n行列の各行と各列にはそれぞれ名前を付けることができる。\n\nrow.names(A) <- c('row1', 'row2', 'row3')  # 各行に名前をつける\ncolnames(A) <- c('col1', 'col2', 'col3')   # 各列に名前をつける\nA\n\n     col1 col2 col3\nrow1    1    2    3\nrow2    4    5    6\nrow3    7    8    9\n\n\nrow.names()には . があり、colnames()にはそれがないことに注意。\n行列の\\(i\\)行\\(j\\)列を取り出すには、行列名[i, j]とする。 例えば\n\nA[1, 3]          # 第1行、第3列の要素を取り出す\n\n[1] 3\n\nA[2, c(1, 3)]    # 第2行で、第1列と第3列の要素を取り出す\n\ncol1 col3 \n   4    6 \n\nA[3, ]           # 第3行の要素をすべて取り出す\n\ncol1 col2 col3 \n   7    8    9 \n\nA[, 2]           # 第2列の要素をすべて取り出す\n\nrow1 row2 row3 \n   2    5    8 \n\n\n\n2.1.3.4 行列の演算\nRでは行列を使った計算ができる。\n基本的な演算の結果は次のとおりである。\n\nA <- matrix(1:9, ncol = 3)   　# 行列Aを定義する\nB <- matrix(-4:4, ncol = 3)    # 行列Bを定義する\nA + 3   # 行列の各要素に3を加える\n\n     [,1] [,2] [,3]\n[1,]    4    7   10\n[2,]    5    8   11\n[3,]    6    9   12\n\n2 * A   # 行列の各要素を2倍する\n\n     [,1] [,2] [,3]\n[1,]    2    8   14\n[2,]    4   10   16\n[3,]    6   12   18\n\nA + B   # Aのi行j列要素とBのi行j列要素を足す (i, j = 1, 2, 3)\n\n     [,1] [,2] [,3]\n[1,]   -3    3    9\n[2,]   -1    5   11\n[3,]    1    7   13\n\nA * B   # 行列の要素同士の積\n\n     [,1] [,2] [,3]\n[1,]   -4   -4   14\n[2,]   -6    0   24\n[3,]   -6    6   36\n\nA %*% B  # 行列の積\n\n     [,1] [,2] [,3]\n[1,]  -30    6   42\n[2,]  -39    6   51\n[3,]  -48    6   60\n\nB %*% A  # 行列の積\n\n     [,1] [,2] [,3]\n[1,]    0   -9  -18\n[2,]    6    6    6\n[3,]   12   21   30\n\n## AB と BA は異なる\nA %*% B == B %*% A  # 要素ごとに等しいかどうか比較する\n\n      [,1]  [,2]  [,3]\n[1,] FALSE FALSE FALSE\n[2,] FALSE  TRUE FALSE\n[3,] FALSE FALSE FALSE\n\na <- 1:3  # ベクトルを定義する\nA %*% a   # (3行3列) x (3行1列) なので結果は3行1列\n\n     [,1]\n[1,]   30\n[2,]   36\n[3,]   42\n\n\n行列の転置 (transpose) にはt()を使う。\n\nt(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n逆行列はsolve()で求める。\n\nC <- matrix(c(2, 3, 5, \n              7, 11, 13,\n              17, 19, 23),\n            nrow = 3)\nsolve(C)\n\n            [,1]       [,2]        [,3]\n[1,] -0.07692308 -0.7692308  0.69230769\n[2,] -0.33333333  0.5000000 -0.16666667\n[3,]  0.20512821 -0.1153846 -0.01282051\n\n\n特異行列 (a singular matrix) にsolve() を使うとエラーになる。\n\nS <- matrix(1:9, nrow = 3)\nsolve(S)\n\nError in solve.default(S): Lapack routine dgesv: system is exactly singular: U[3,3] = 0\n\n\nエラーメッセージを読めば何がまずいのかわかるので、エラーが出たらエラーメッセージの中身をよく読むこと。 この場合は、行列が特異行列 (singular) であることを教えてくれている。\n\n\n\n\n\n\nヒント\n\n\n\nRを使っている最中にエラーが出ても何も問題ない。プログラミングを身につけるためには試行錯誤が必要なので、エラーをおそれず、どんどんエラーを出していこう。\nエラーが出たら、「自分の意図したとおりに動かず、エラーが出たのはなぜか」を考えよう。エラーの原因を特定することで、プログラミング（R言語）に対する理解が深まるだろう。"
  },
  {
    "objectID": "intro-to-ggplot2.html#sec-prep6",
    "href": "intro-to-ggplot2.html#sec-prep6",
    "title": "\n5  ggplot2 入門\n",
    "section": "\n5.1 準備",
    "text": "5.1 準備\n今回利用するパッケージを読み込もう。ggplot2 は tidyverse に含まれているので、library() で tidyverse を読み込めばよい。\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "intro-to-ggplot2.html#sec-dataframe",
    "href": "intro-to-ggplot2.html#sec-dataframe",
    "title": "\n5  ggplot2 入門\n",
    "section": "\n5.2 データフレーム",
    "text": "5.2 データフレーム\nggplot2 で図を作るためには、データフレーム (data frame) と呼ばれる形式のデータが必要である。 そこで、まずデータフレームについて説明する。\n\n5.2.1 CSVデータの読み込み\nCSV形式で保存されたデータセットをもっているなら、readr::read_csv() や read.csv() などでそのデータを読み込めば、データフレームができる。\n\n\n\n\n\n\n備考\n\n\n\nreadr パッケージも tidyverse に含まれているので、tidyverse を読み込み済みならあらためて librar(readr) を実行する必要はない。 このように、tidyverse はデータ分析でよく使うツールをまとめて提供しており、便利である。 詳しくは、『私たちのR』「データハンドリング」 を参照されたい。\n\n\n例として、前にも使った fake_data_01.csv を読み込んでみよう。プロジェクト内の data ディレクトリ（フォルダ）に fake_data_01.csv があることを想定している。\n\nmyd <- read_csv(\"data/fake_data_01.csv\")\n\nこれがデータフレームかどうか確かめるために、is.data.frame() を使う。\n\nis.data.frame(myd)\n\n[1] TRUE\n\n\nTRUE （真）という答えが返され、myd がデータフレームであることがわかる。\nデータフレームの中身は、tibble::glimpse() で確認できる。\n\nglimpse(myd)\n\nRows: 100\nColumns: 6\n$ id     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …\n$ gender <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\",…\n$ age    <dbl> 52, 33, 22, 33, 26, 37, 50, 30, 62, 51, 55, 36, 66, 42, 36, 47,…\n$ height <dbl> 174.0, 175.3, 175.0, 170.1, 167.4, 159.3, 173.3, 162.5, 160.2, …\n$ weight <dbl> 63.1, 70.2, 82.6, 81.8, 51.2, 57.8, 68.6, 47.2, 68.2, 59.4, 66.…\n$ income <dbl> 3475810, 457018, 1627793, 6070642, 1083052, 2984929, 1481061, 1…\n\n\nid, gender, age, height, weight, income という6つの変数があり、gender が <chr> すなわち文字列 (character) 型で、他の変数はすべて <dbl> すなわち実数 (double [double-precision floating-point]) 型であることがわかる。\nデータフレームの中身を確認する方法は他にもいくつかある。 View() を使うと、表計算ソフトのスプレッドシートと同じように、データを表形式で表示してくれる。 Source ペインに表示されるので確認が終わったらタブを閉じるようにしよう。 この関数は qmd (Rmd) ファイルではなく、Console に直接入力したほうが良い。\n\n\n\n\n\n\nヒント\n\n\n\nView() や help() のように、RStudio でインタラクティブに（マウスを使って）操作することを想定するコマンドは、Console に直接書き込むようにする。また、繰り返し使わないコマンド（例：install.packages() ）も R マークダウンに記録するのではなく、Consoleに書き込もう。\n\n\n\nView(myd)\n\nひとつひとつの変数が列（縦方向の並び）を構成し、観測個体が行（横方向の並び）を構成していることがわかる。 View() の代わりに、RStudio の右下のペインにある Environment タフで、Data という項目に表示されているデータの右端にあるボタンを押して、データを表示することもできる。\nデータフレームの各列の名前（つまり、変数名）を知りたいときは、names() を使う。\n\nnames(myd)\n\n[1] \"id\"     \"gender\" \"age\"    \"height\" \"weight\" \"income\"\n\n\nこれで、どのような名前で変数が記録されているかがわかる。\nこの例では変数が6つしかないので自分で変数の数を数えるのも容易である。しかし、変数の数が多い場合には、自分で数えるのは面倒だ。そのようなときは、ncol() を使う（ncol は the number of columns [列の数] の略である）。\n\nncol(myd)\n\n[1] 6\n\n\nこれで、myd には変数が6つあることがわかる。\nまた、データに含まれる観測個体の数は、nrow() で確かめることができる (the number of rows [行の数] の略である）。\n\nnrow(myd)\n\n[1] 100\n\n\nmyd は100行あることがわかる。\ndim() を使えば、行数と列数を1度に調べることができる。\n\ndim(myd)\n\n[1] 100   6\n\n\n実は、行数と列数は、上でglimpse(myd) を実行したときにも表示されていた。\nデータの先頭の数行を表示して変数の中身を確認したいときは、head() を使う。\n\nhead(myd)\n\n# A tibble: 6 × 6\n     id gender   age height weight  income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>   <dbl>\n1     1 male      52   174    63.1 3475810\n2     2 male      33   175.   70.2  457018\n3     3 male      22   175    82.6 1627793\n4     4 male      33   170.   81.8 6070642\n5     5 male      26   167.   51.2 1083052\n6     6 male      37   159.   57.8 2984929\n\n\nこのように、デフォルトでは最初の6行が表示される。表示する行数は、自分で指定できる。引数 nを使う。\n\nhead(myd, n = 4)\n\n# A tibble: 4 × 6\n     id gender   age height weight  income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>   <dbl>\n1     1 male      52   174    63.1 3475810\n2     2 male      33   175.   70.2  457018\n3     3 male      22   175    82.6 1627793\n4     4 male      33   170.   81.8 6070642\n\n\n同様に、データの末尾は tail() で表示できる。\n\ntail(myd, n = 5)\n\n# A tibble: 5 × 6\n     id gender   age height weight   income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>    <dbl>\n1    96 female    65   161.   46.8  6127136\n2    97 female    45   161.   48.7  1062663\n3    98 female    53   166.   64.2 10154200\n4    99 female    43   158.   48.5  8287163\n5   100 female    48   154.   42    1125390\n\n\nデータの中身をさらに詳しく知りたい場合には、str() (structure) を使う。\n\nstr(myd)\n\nspc_tbl_ [100 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id    : num [1:100] 1 2 3 4 5 6 7 8 9 10 ...\n $ gender: chr [1:100] \"male\" \"male\" \"male\" \"male\" ...\n $ age   : num [1:100] 52 33 22 33 26 37 50 30 62 51 ...\n $ height: num [1:100] 174 175 175 170 167 ...\n $ weight: num [1:100] 63.1 70.2 82.6 81.8 51.2 57.8 68.6 47.2 68.2 59.4 ...\n $ income: num [1:100] 3475810 457018 1627793 6070642 1083052 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   gender = col_character(),\n  ..   age = col_double(),\n  ..   height = col_double(),\n  ..   weight = col_double(),\n  ..   income = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nこの情報はR初心者にはわかりにくいと思われるので、最初は glimpse() を使った方がよいだろう。\nデータセットをRに読み込んだら、glimpse() をはじめとするさまざまな関数を使って、データの中身を確認する習慣を身につけよう。\n\n5.2.2 データフレームの作成\nデータフレームは、data.frame() を使ってRで作ることもできる。データフレームの代わりにtibble と呼ばれる形式のデータを使うこともできる。tibble は、tibble::tibble() で作れる。\n練習のために、df1という名前のデータフレーム (data.frame) と、df2という名前のtibble を作ってみよう。まず、x とy という2つの変数をもつ df1 を作る。\n\ndf1 <- data.frame(x = 1:100, \n                  y = 100:1)\nis.data.frame(df1)\n\n[1] TRUE\n\n\nこのデータの中身を確認してみよう。\n\nglimpse(df1)\n\nRows: 100\nColumns: 2\n$ x <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2…\n$ y <int> 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84,…\n\n\nx と y という変数があり、それぞれが <int> すなわち整数 (integer) 型であることがわかる。また、データは100行2列である。\n次に、v1, v2, v3 という3つの変数をもつ df2 を tibble() で作る。rnorm(n, mean, sd) で、平均がmean、標準偏差がsd の正規分布から n 個の乱数を生成することができる（詳しくは、後半のトピックで説明する）。\n\ndf2 <- tibble(v1 = rnorm(100, mean =  0, sd = 5),\n              v2 = rnorm(100, mean = -4, sd = 5),\n              v3 = rnorm(100, mean =  0, sd = 1))\nis.data.frame(df2)\n\n[1] TRUE\n\n\ndf2 の中身を確認しておこう。\n\nglimpse(df2)\n\nRows: 100\nColumns: 3\n$ v1 <dbl> 6.9568972, -8.4509273, 6.7486228, 2.1590789, 3.4219096, -7.9103233,…\n$ v2 <dbl> -10.3799543, -3.7886470, -8.5659749, -4.2223668, -8.2477385, -6.772…\n$ v3 <dbl> 1.073464950, -0.378906874, 1.598537082, -0.456347432, -0.977521325,…\n\n\nv1, v2, v3 という3つの変数があり、それぞれが <dbl> すなわち実数型であることがわかる。このデータフレームは100行3列である。\n\n\n\n\n\n\n備考\n\n\n\n<dbl> というのは、double precision floating point number type（倍精度浮動小数点数型）のことである。この授業で必要な範囲では、実数 (real number) であると考えて差し支えない。この他に授業で出てくる変数の型は、\n\n\n<int>: integer（整数型）\n\n<lgl>: logical（論理型）\n\n<chr>: character（文字列型）\n\n<fct>: factor（因子型）\n\nそれぞれ登場したときに必要な範囲で説明するが、詳しくは「プログラミング」の授業で勉強してほしい。\n\n\nこのように、data.frame() と tibble() を使って、df1とdf2という “data.frame” （データフレーム）を作ることができた。基本的にはどちらの方法でデータフレームを作っても良いが、特にdata.frame() のほうを好む理由がなければ、今後は tibble() でデータフレーム (tibble) を作ろう。（tibble を優先する理由の説明は割愛するが、Consoleに直接 df1 [これは data.frame である] と入力して実行した結果と、 同じく df2[これは tibble である] と入力して実行した結果を比べると、tibble のほうが良い理由の1つがわかるだろう。）\n\n5.2.3 組み込みデータ\nRにはあらかじめいくつかの（多くの！）データフレームが用意されている。たとえば、自動車に関するデータセットであるmtcarsというものがある。このデータは、data() で呼び出すことができる。\n\ndata(mtcars)\n\nこれを実行すると、RStudio 右下ペインの Environment タブの中で、Values という項目のところに、mtcars が表示されるはずだ。この中身を確認してみよう。\n\nglimpse(mtcars)\n\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n32行11列のデータであることがわかる。この時点で、 Environment タブの中で Data 項目の中に mtcars が移動し、データフレームとして認識されていることがわかる。念のために確認しておこう。\n\nis.data.frame(mtcars)\n\n[1] TRUE\n\n\nこのデータの詳細を確認したければ、次のコマンドで。\n\n\n\n他にどんなデータが利用可能か確認したければ、以下を実行する。\n\ndata()"
  },
  {
    "objectID": "intro-to-ggplot2.html#sec-ggplotbasic",
    "href": "intro-to-ggplot2.html#sec-ggplotbasic",
    "title": "\n5  ggplot2 入門\n",
    "section": "\n5.3 ggplot2の基礎",
    "text": "5.3 ggplot2の基礎\n\n5.3.1 ggplot2 とは何か\nggplot2 は、Rで綺麗な図を作るためのパッケージである。 Posit（旧RStudio）のChief Scientist である Hadley Wickham が大学院生時代に開発・公開し、アップデートを重ねてきたものである（Hadley は tidyverse などの重要パッケージ開発の中心人物であり、世界中のRユーザから最も尊敬されている人物だと考えられる。日本の一部のRユーザは彼を「羽鳥先生」と呼ぶ）。\nggplot2 の gg は　Grammar of Graphics（図のための文法） という意味で、一貫した方法で様々な図が作れるように工夫されている。 最初は文法を覚えるのに少し苦労するかもしれない。しかし、一度文法を身につけてしまえば、様々な図を簡単に作れるようになるので、とても便利である。また、デフォルト（既定）の設定でそれなりに綺麗な図が作れるのも魅力である（某表計算ソフトのように、何も考えずに 3D棒グラフのような醜い図を作ってしまうということが防げる）。\nggplot2 についての詳しい説明は、Hadley自身が書いた ggplot2: Elegant Graphics for Data Analysis, 3rd edition. (Springer) で読むことができる（オンラインで無料で公開 されている）。\nまた、チートシート（日本語版; 英語版）が公開されているので、ダウンロードしていつでも見られるようにしておくと、便利である。\n\n\n\n\n\n\nヒント\n\n\n\nこの他にも、さまざまなチートシートが Posit のウェブサイト で公開されている。 いくつかのチートシートには日本語翻訳もある。作成者と翻訳者の皆さんに感謝。\n\n\n\n5.3.2 ggplot2 パッケージの読み込み\nこのページの冒頭に書いたとおり、ggplot2は tidyverse に含まれているので、library() で tidyverse を読み込めばよい。上で実行したなら、再度実行する必要はない。\n\nlibrary(tidyverse)\n\n次に、日本語が正しく表示されるようにするため、theme_set() で使用する文字フォントを指定する。OSによって命令がやや異なるので注意されたい。 以下のチャンクは、KUTの情報演習室を利用することを想定して、Windows用に書かれている（コメント部分に他のOS用の命令も書いてある）。以下はあくまで例であり、他のフォントを使用してもよい（各自のパソコンにインストールされているフォントは私にはわからないので、変えたいなら自分で調べること。もちろん、日本語が表示できるフォントが必要）。\n\n## 図のなかで日本語を使えるようにする\n## フォントの設定はお好みで\n#my_font <- \"HiraginoSans-W3\" # macOS\n## Unix/Linux ではIPAexフォントのインストールが必要かも）\n#my_font <- \"IPAexGothic\" # Linux\nlibrary(fontregisterer)\nmy_font <- \"Yu Gothic\"\ntheme_set(theme_gray(base_size = 9,\n                     base_family = my_font))\n\n\n\n\n\n\n\nヒント\n\n\n\nコードチャンクに書かれたコマンドを1つずつ実行するときに使うショートカットは command + reutrn または Ctrl + Enter であることは以前説明した。複数行にわたるコマンドであっても、1つのコマンドであればこの方法で実行できる。しかし、上のコードチャンクのように複数のコマンドが含まれる場合、その方法では一挙に実行することができない。\nコードチャンク全体を一挙に実行するためには、command + shift + return または Ctrl + Shift + Enter というショートカットを利用する。\n\n\n\n5.3.3 ggplot の基本的な使い方\nggplot2::ggplot() を使って図を作る手順は次のとおりである。\n\n作図対象となるデータを ggplot() に入力する\n\n\ndata: データフレームを指定\n\nmapping: どの変数を図のなかでどのように利用するか指定\n\n\n\ngeom_xxx() で図の層を加える（xxx の部分はグラフの種類によって変わる）\nラベル (label) や凡例 (legend) の指定、作図範囲の絞り込み、軸の交換などを行う\n\nplot() で図を表示する\n\n順番にやってみよう。\n\n5.3.3.1 例1：散布図\n上で読み込んだ mtcars は自動車に関するデータである。例として、燃費 (mile per gallon; mpg) と車の重量 (weight; wt) の関係を散布図にしてみよう。\nまず、 作図対象となるデータを指定する。また、作図の対象となる変数を指定する。ここでは、散布図の横軸 xに wt、縦軸yに mpg を指定する。\n\np1_1 <- ggplot(data = mtcars, \n               mapping = aes(x = wt, y = mpg)) \n\n同じことだが、data とmapping は省略して\n\np1_1 <- ggplot(mtcars, aes(x = wt, y = mpg)) \n\nと書くことが多い。\nこの時点で図を表示してみる。\n\nplot(p1_1)\n\n\n\n\n指定した通り、横軸にwt、縦軸にmpgをとった図を描く準備ができているが、グラフ自体はまだない。\nここに、散布図を作るための層 (layer) を加える。図を作るためには、geom_xxx() のように、geom から始まる関数で新たな層 (layer) を加える必要がある。geom とは geometry（形状）のことである。たとえば、ヒストグラム (histogram) を作るときはgeom_histogram() を、箱ひげ図 (box[-and-whisker] plot) を作るときは geom_boxplot() を使う。\n散布図は、geom_point() でできる。\n\np1_2 <- p1_1 + geom_point()\n\nこのように、前に作ったものに + で何かを加えることで、ggplot に新たな要素を追加することができる。この時点で、作った図を表示してみよう。\n\nplot(p1_2)\n\n\n\n\n散布図ができた。\n次に、ラベルをわかりやすいものに変える。labs() で変更する。\n\np1_3 <- p1_2 + \n    labs(x = \"重量 (1000 lbs)\", \n         y = \"燃費 (Miles / US gallon)\")\n\n表示してみる。\n\nplot(p1_3)\n\n\n\n\nこれで散布図ができた。\n慣れてきたら、一挙にコマンドを書いてもよい。\n\np1 <- ggplot(mtcars, aes(x = wt, y = mpg)) +\n    geom_point() +\n    labs(x = \"重量 (1000 lbs)\", \n         y = \"燃費 (Miles / US gallon)\")\nplot(p1)\n\n\n\n\n\n5.3.3.2 例2：ヒストグラム\n引き続き mtcars を使う。燃費 (mile per gallon; mpg) のヒストグラムを作ってみよう。\nまず、作図対象となるデータを入力する。また、作図対象となる変数を指定する。ヒストグラムは1つの変数を可視化するグラフなので、aes にはxのみ指定する。\n\np2_1 <- ggplot(mtcars, aes(x = mpg)) \n\nこの時点で図を表示してみる。\n\nplot(p2_1)\n\n\n\n\n指定した通り、横軸にmpgをとった図を描く準備ができているが、グラフ自体はまだない。また、縦軸は指定していないので何もない。\nここに、ヒストグラムを作るための層 (layer) を加える。ヒストグラムは、geom_histogram() でできる。\n\np2_2 <- p2_1 + geom_histogram()\n\nこの時点で表示してみよう。\n\nplot(p2_2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nヒストグラム自体はできている。しかし、ビン（ヒストグラムの一つひとつの棒）の幅が狭すぎるので、binwidth で調整する（binwidth を指定しないと、`stat_bin()` using … というメッセージが表示され、適切な binwidth を設定するよう促される）。ここでは、2.5 mpgごとに1つのビン（ヒストグラムの棒）を作ってみよう。\n\np2_3 <- p2_1 + \n    geom_histogram(binwidth = 2.5)\nplot(p2_3)\n\n\n\n\nビンの境が見えにくいので、ビンの縁に黒色をつけよう。ビンの縁取りは color で指定する。color で指定するのはビンの中身の色ではないので注意しよう。\n\np2_4 <- p2_1 + \n    geom_histogram(binwidth = 2.5, color = \"black\")\nplot(p2_4)\n\n\n\n\nビンの区切りがちょうどいい位置にないので、boundary でビンの境界をどの位置に置くか指定する。今回はビンの幅が2.5 なので、境界線が\\(5, 7.5, 10, \\dots\\) になるように 5 を指定する。\n\np2_5 <- p2_1 + \n  geom_histogram(binwidth = 2.5, \n                 color = \"black\",\n                 boundary = 5)\nplot(p2_5)\n\n\n\n\n次に、ラベルをわかりやすいものに変える。\n\np2_6 <- p2_5 + \n    labs(x = \"燃費 (Miles / US gallon)\", y = \"度数\")\nplot(p2_6)\n\n\n\n\nこれで縦軸が度数 (count, frequency) のヒストグラムができた。\nヒストグラムの縦軸を確率密度 (probability density) に変えたいときは、aes() で y = after_stat(density) を指定する。ついでに、ビンの色をドジャーブルーに変えてみる（必要ではない。Go, Dodgers!)\n\np2_dens <- ggplot(mtcars,\n                  aes(x = mpg, \n                      y = after_stat(density))) +\n    geom_histogram(binwidth = 2.5, \n                   boundary = 5, \n                   color = \"black\", \n                   fill = \"dodgerblue\") +\n    labs(x = \"燃費 (Miles / US gallon)\", \n         y = \"確率密度\")\nplot(p2_dens)    \n\n\n\n\n指定可能な色は、このページ で確認できる。\n\n5.3.3.3 例3：箱ひげ図\nRに用意されている、ダイヤモンドのデータ diamonds を使ってみよう。\n\ndata(diamonds)\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\nclass(diamonds)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n詳細については、?diamonds で確認できる。\nダイヤモンドのカットの質 (cut) ごとの 深さ (depth) のばらつきを可視化するため、箱ひげ図 (box[-and-whisker] plot) を作ってみよう。\nまず、データとマッピングを指定する。\n\np3_1 <- ggplot(diamonds, aes(x = cut, y = depth))\nplot(p3_1)\n\n\n\n\n指定通り、横軸に cut、縦軸に depth を可視化する準備ができている。\n次に、geom_boxplot() で箱ひげ図の層を加える。\n\np3_2 <- p3_1 + geom_boxplot() \nplot(p3_2)\n\n\n\n\n軸ラベルを日本語にする。\n\np3_3 <- p3_2 + labs(x = \"カット\", y = \"深さ\")\nplot(p3_3)\n\n\n\n\nFair, Good なども日本語にすることもできるが、今回は覚えなくて良い（私にはダイヤモンドの知識がまったくないのでよくわからないが、ネットで検索した限りだと、Fair の訳は フェア、Good の訳は グッド、 … で日本語にする意味がなさそう）。一応できるということを見せるために、コードは載せておく（このコードは今は理解しなくてよい）。\n\np3_3a <- diamonds %>% \n    mutate(cut_jp = factor(\n      cut, \n      levels = c(\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"),\n      labels = c(\"フェア\", \"グッド\", \"ベリーグッド\", \n                 \"プレミアム\", \"アイディアル\"))) %>% \n    ggplot(aes(x = cut_jp, y = depth)) +\n    geom_boxplot() +\n    labs(x = \"カット\", y = \"深さ\")\nplot(p3_3a)\n\n\n\n\n箱ひげ図の向きを横向きにしたいときは、作った図に coord_flip() を使えば良い。\n\np3_4 <- p3_3 + coord_flip()\nplot(p3_4)\n\n\n\n\nこのように、coord_flip() は横軸と縦軸を入れ替えてくれる。箱ひげ図以外でも使える。\nまた、aes() の xとy を入れ替えることで、向きを変えることもできる。\n\np4 <- ggplot(diamonds, aes(x = depth, y = cut)) +\n    geom_boxplot() +\n    labs(x = \"カット\", y = \"深さ\")\nplot(p4)\n\n\n\n\nこれらの例からわかるとおり、作図に用いる変数の指定は、aes() で行う。aes とは aesthetics（美感、見た目）のことである。この aes() の指定の仕方は作る図によって異なる。したがって、ggplot2 の使い方をマスターするには、geom ごとに異なるaes の使い方を覚える必要がある。覚えるといっても、必ずしも暗記する必要なない。頻繁に使うものは覚えたほうが楽（自然に覚える）が、その他のものについては上で紹介したチートシートやインターネット上にまとめられた情報（たとえば、ココ やココ）で確認すればよい。"
  },
  {
    "objectID": "intro-to-ggplot2.html#sec-savefig",
    "href": "intro-to-ggplot2.html#sec-savefig",
    "title": "\n5  ggplot2 入門\n",
    "section": "\n5.4 作成した図の保存",
    "text": "5.4 作成した図の保存\n作成した図は、PDFファイルやPNGファイルなどの外部ファイルに保存することができる。プロジェクト内に、図を保存するための figs というディレクトリ（フォルダ）を新たに作り、図をその中に保存しよう。\n\ndir.create(\"figs\")\n\n図はPDFとして保存することが望ましい（理由の説明は省略するが、一言で述べれば「ベクター画像」が望ましいから）ので、PDFファイルでの保存方法のみ説明する。\n\n\n\n\n\n\n重要\n\n\n\n図のファイルを作るときは、あらかじめ図のサイズ（幅 [width] と高さ [height]）を決めておくことが重要である。いいかげんなサイズで図を作り、後で拡大・縮小すると、軸ラベルの文字などが伸びたり縮んだりして汚くなるので、スマートではない。\n\n\n基本的には、以下の3つのステップで図を保存する。\n\n図を保存するためのファイルを開く（作る）\n図をファイルに書き込む\nファイルを閉じる\n\nこれら3つのステップはセットで行う。Quarto (R Markdown) を使っている場合は特に注意が必要で、各ステップを1つずつ実行しても図が保存されない。 そこで、3つのステップを1つのコードチャンクの中にまとめて書き、以下のいずれかの方法でチャンク全体を一挙に実行する必要がある。\n\nショートカットを使う\n\n\ncommand + shift + return (macOS)\n\nCtrl + Shift + Enter （どのOSでも）\n\n\nチャンク右上の実行ボタン (Run Current Chunk) をクリックする\n\nPDF形式の図を保存するには、cairo_pdf() という関数を使うのが便利である。 先ほど作ったヒストグラム p2_6 を、PDFファイルに保存しよう。 ファイル名は、hist_eg1.pdf にしよう。図の大きさは、A4用紙の半ページよりやや小さくなるように、幅 (width) を5インチ (127.0mm)、高さ (height) を4インチ (101.6mm) にする。軸ラベルに日本語を使っているので、日本語を表示できるフォントを指定する必要があるが、上で library(tidyverse) を実行した直後に fontregregisterer パッケージを利用して theme_set() で指定したフォント（Linux は IPAexゴシック、macOS は ヒラギノ角ゴシック、Windows は游ゴシック）が使われる。 第1ステップの内容をまとめると、次のようになる（第1ステップだけで実行しない!!!）。\n\ncairo_pdf(file = \"figs/hist_eg1.pdf\",\n          width = 5, height = 4)\n\nfile の figs/ という部分が、figs ディレクトリ（フォルダ）の中にファイルを作ることを指示している。\n第2ステップは、第1ステップの直後に print(p2_6) とすればよい。\n最後に、ファイルを閉じるために、dev.off() を実行する。\n以上をまとめると、次のようになる。qmd (Rmd) ファイルを使っている場合は、以下のコードチャンクを一挙に実行する必要がある（Rスクリプトでは1行ずつ実行してよい）。\n\ncairo_pdf(file = \"figs/hist_eg1.pdf\",\n          width = 5, height = 4)\nprint(p2_6)\ndev.off()\n\nこれで図 (p2_6) が保存されるはずだ。figsディレクトリの中に、hist_eg1.pdf というPDFファイルができていることを確かめよう。また、PDFファイルを開いて図が保存されていることも確認しよう。\n\n\n\n\n\n\n備考\n\n\n\nmacOS を使っているなら、cairo_pdf() の代わりに quartz() を使うこともできる。quartz() を使う場合は、\n\nquartz(file = \"figs/hist_eg1.pdf\", \n       type = \"pdf\", family = \"HiraginoSans-W3\",\n       width = 5, height = 4)\nprint(p2_6)\ndev.off()\n\nのようにする。"
  },
  {
    "objectID": "intro-to-ggplot2.html#sec-commonfig",
    "href": "intro-to-ggplot2.html#sec-commonfig",
    "title": "\n5  ggplot2 入門\n",
    "section": "\n5.5 よく使う図の作り方",
    "text": "5.5 よく使う図の作り方\nggplotの使い方を身につけるために、統計学でよく使う基本的な図を作ってみよう。\n例として、fake_score.csv という架空のデータを使おう。このデータに含まれる変数は、以下の通りである。\n\nid: 個人識別番号。\nclass: クラス。1組から8組まで。\ngender: 性別。女 (female) か男 (male) か。\nmath: 数学の試験の得点。\nenglish: 英語の試験の得点。\nchemistry: 化学の試験の得点。\n\nまず、データを保存するためのディレクトリを作る。既にプロジェクト内に data ディレクトリがある場合（これまでの実習をすべて実行していれば、既にあるはずである）、このコマンドは実行しなくてよい。\n\ndir.create(\"data\")\n\n次に、データをダウンロードする。以下のコードはWindows では失敗する可能性が高いので、ココを右クリック して対象をファイルに保存する。保存先はプロジェクトフォルダの中の data フォルダにする（ダウンロードした後にファイルを移動してもよい）。\n\ndownload.file(\n  url = \"https://yukiyanai.github.io/jp/classes/stat1/data/fake_score.csv\",\n  destfile = \"data/fake_score.csv\"\n)\n\nデータを読み込む。\n\nmyd <- read_csv(\"data/fake_score.csv\")\n\nデータの中身を確認する。\n\nglimpse(myd)\n\nRows: 400\nColumns: 6\n$ id        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ class     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ gender    <chr> \"female\", \"female\", \"female\", \"female\", \"female\", \"female\", …\n$ math      <dbl> 100, 43, 80, 52, 63, 45, 74, 54, 59, 74, 65, 41, 71, 75, 75,…\n$ english   <dbl> 68, 59, 67, 60, 72, 59, 69, 66, 72, 73, 77, 52, 69, 65, 57, …\n$ chemistry <dbl> 97, 60, 75, 60, 57, 67, 62, 63, 69, 67, 70, 48, 59, 76, 84, …\n\n\n正しくデータが読み込めたようだ。このデータを使い、作図の方法を学習しよう。\nこの時点でデータが正しく読み込めていない場合は、ウェブブラウザで fake_score.csv をダウンロードし、ダウンロードしたファイルを手動でプロジェクト内のデータフォルダの中に移動してから、以下を実行し直そう。 もう一度データを読み込む。\n\nmyd <- read_csv(\"data/fake_score.csv\")\nglimpse(myd)\n\n\n5.5.1 棒グラフ\n棒グラフ (bar plot) は geom_bar() で作る。まず、クラスごとの人数を棒グラフにしてみよう。 横軸にクラス、縦軸にはクラスの人数を表示する。そのために、次のコマンドを使う。\n\nbar1 <- ggplot(myd, aes(x = class)) +\n    geom_bar() +\n    labs(x = \"クラス\", y = \"人数\")\n\n表示してみよう。\n\nplot(bar1)\n\n\n\n\n各クラスの人数が、等しく50人ずつであることがわかる。\n横軸のクラスの数字1から8のうち、表示されていない数字がある。scale_x_continuous() を使って、すべて表示させよう。既に作った bar1 を基に、新しい図を作る。\n\nbar2 <- bar1 + \n    scale_x_continuous(breaks = 1:8)\n\n表示してみよう。\n\nplot(bar2)\n\n\n\n\nクラスの数字をすべて表示することができた。\n男女の内訳はどうなっているだろうか。男女を色分けして描き、図で確かめよう。 データセットに含まれる gender という変数を使って色分けするために、aes の中で fill を指定する。\n\nbar3 <- ggplot(myd, aes(x = class, fill = gender)) +\n    geom_bar() +\n    labs(x = \"クラス\", y = \"人数\") +\n    scale_x_continuous(breaks = 1:8)\nplot(bar3)\n\n\n\n\n女子の方が多いクラスと男子の方が多いクラスがあるようだ。 凡例 (legend) が英語になっているので、日本語に直そう。ついでに利用するカラーパレットも変える。\n\nbar4 <- bar3 + \n    scale_fill_brewer(palette = \"Accent\",\n                      name = \"性別\", \n                      labels = c(\"女\", \"男\"))\nplot(bar4)\n\n\n\n\nこの棒グラフでは男女の数の比較が難しいので、男女の棒を並べて描きたい。そのために、position = \"dodge\" を指定する。\n\nbar5 <-  ggplot(myd, aes(x = class, fill = gender)) +\n    geom_bar(position = \"dodge\") +\n    labs(x = \"クラス\", y = \"人数\") + \n    scale_x_continuous(breaks = 1:8) +\n    scale_fill_brewer(palette = \"Set2\",\n                      name = \"性別\", \n                      labels = c(\"女\", \"男\"))\nplot(bar5)\n\n\n\n\nこれで、クラス1からクラス4までは女子が20人で男子が30人だが、残りのクラスでは男女の数が逆転していることがわかる。\n\n5.5.2 ヒストグラム\nヒストグラム (histogram) は、ある変数の分布の仕方を確かめる際に最も便利な図である。 既に説明した通り、ヒストグラムを作るには geom_histogram() を使う。\n\n5.5.2.1 基本的な使い方\nまず、数学の点数をヒストグラムにしてみよう。\n\nhist1 <- ggplot(myd, aes(x = math)) +\n    geom_histogram() +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nこのままだと、ヒストグラムの一つひとつの棒 (bin) の区切りが分かりにくいので、棒の縁に色をつけよう。 既に説明したとおり、縁取りの色はcolor で指定する。このとき、変数によって色を変えるのではなく、自分で設定した色を使うため、aesの外で color を指定する（上での棒グラフの例では、aesの中で fill を指定した）。\n\nhist2 <- ggplot(myd, aes(x = math)) +\n    geom_histogram(color = \"black\") +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n次に棒の幅 (bin width) を変えてみよう。binwidth を指定することで、棒の幅を設定できる。試しに、10点ごとにしてみよう。\n\nhist3 <- ggplot(myd, aes(x = math)) +\n    geom_histogram(color = \"black\", binwidth = 10) +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist3)\n\n\n\n\n\n5.5.2.2 縦軸を確率密度に変える\n上で説明したとおり、y に after_stat(density) を指定することで、縦軸を確率密度 (probability density) に変えることができる。\n\nhist4 <- ggplot(myd, aes(x = math, y = after_stat(density))) +\n    geom_histogram(color = \"black\", binwidth = 10) +\n    labs(x = \"数学の点数\", y = \"確率密度\")\nplot(hist4)\n\n\n\n\n縦軸が確率密度のヒストグラムができた。\n\n5.5.2.3 複数の geom を重ねる\n数学の点数の平均値は、\n\nmean(myd$math)\n\n[1] 55.6\n\n\nである。これを図に書き加えよう。\nまず、geom_vline() で、平均値の位置に縦線を加える。 vlineのv はvertical（垂直）を示す。 geom_vline()で縦線の位置を決めるために、xintercept（x切片、つまり、線が横軸と交わる位置）を指定する。\n\nhist5 <- hist3 + \n    geom_vline(xintercept = mean(myd$math), \n               color = \"red\")\nplot(hist5)\n\n\n\n\n次に、平均値の値を（小数第一位までに丸めて [round] して）書き込む。 日本語を使うので、family でフォントを指定する必要がある。\n\nhist6 <- hist5 + \n    geom_text(aes(x = 70, y = 90, \n                  label = str_c(\"平均値：\", round(mean(myd$math), 1))),\n              color = \"red\", \n              family = my_font)\n\n表示する。\n\nplot(hist6)\n\n\n\n\n\n5.5.2.4 facet でグループを分ける\n数学の点数のヒストグラムを、クラスごとに分けて描いてみよう。そのために、facet_wrap() を使う。\n\nhist7 <- hist3 + \n    facet_wrap(vars(class))\nplot(hist7)\n\n\n\n\nこのように、クラスごとにヒストグラムができる。\n\n5.5.3 箱ひげ図\nヒストグラムは分布の形状を確かめるのに便利だが、上で作った hist7 のように、複数のグループの分布を比較するのには少し不便である。 そこで異なるグループの分布を比較するときによく使われるのが、箱ひげ図 (box[-and-whisker] plot) である。箱ひげ図は、五数要約（最小値、第1四分位数、中央値、第3四分位数、最大値）と外れ値（「1.5 \\(\\times\\) IQRルール」で判定される）を図で表現するものである。\n箱ひげ図は、geom_boxplot() で作る。このとき、aes には x（比較するグループを表す変数）とy（作図の対象となる変数）を指定する（xの代わりに group を使うこともできる）。ここで、class の中身の数字には数値としての意味はなく、単にクラス分けのための記号にすぎないことを gpplotに伝えるために as.factor() を使う（本当はデータ前処理の時点で　id と class は factor にしておくことが望ましいが、今回はこれで妥協する）。既に説明したとおり、横向きにしたいときは、x とy を入れ替えれば良い。\n\nbox1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_boxplot() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(box1)\n\n\n\n\nこれで、グループ間で数学の点数の五数を比較しやすくなった。\n\n5.5.4 バイオリンプロット\n箱ひげ図でグループ間比較がしやすくなったが、ヒストグラムとは異なり、分布の形状がわからなくなってしまった。この不満を解消してくれるのが、バイオリンプロット (violin plot) である。geom_violin() で作る。\n\nvln1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(vln1)\n\n\n\n\nこの図は、ヒストグラムを横倒しにしてその概形を滑らかな線で表したものと、それを鏡に写したものが合わさってできている。バイオリンプロットの幅が広い（狭い）ところが、ヒストグラムの山が高い（低い）ところである。\n\n5.5.5 箱ひげ図とバイオリンプロットの重ね描き\nバイオリンプロットは、分布の形状がわからないという箱ひげ図の弱点を克服しているものの、箱ひげ図では一目でわかった中央値や四分位範囲がわからないという弱点がある。両者の長所を活かすため、二つの図を重ねて描いてみよう。\n\nbv1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_boxplot() +\n    geom_violin() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv1)\n\n\n\n\nバイロリンプロットが箱ひげ図の線に重なり、箱ひげ図がよく見えない。箱ひげ図をバイオリンプロットの上に（手前に）描いたほうがよさそうだ。ggplotでは、後に加えた要素（層）が上になるので、geom_violin() の後に geom_boxplot() を書く。\n\nbv2 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv2)\n\n\n\n\n今度は、箱がバイオリンの線に重なってしまっている。geom_boxplot() で width を指定し、箱の幅を狭くしてみよう。\n\nbv3 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot(width = 0.3) +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv3)\n\n\n\n\nこれで、箱ひげ図とバイロリンプロットが同時に確認できるようになった。しかし、このままでは箱ひげ図が目立たないので、色を変えよう。\n\nbv4 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot(width = 0.3, fill = \"gray\") +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv4)\n\n\n\n\nこの図を見れば、数学の点数の分布をクラス間で比較できる。\n\n5.5.6 ビースウォームプロット（蜂群図）\n箱ひげ図とバイオリンプロットで、グループ間の分布を比較できるようになった。しかし、観測値が実際にどの値をとったかはわからない。この問題を克服するために使われるのが、ビースウォームプロット (bee swarm plot) である。\nggplotを使ってビースウォームプロットを描くには、ggbeeswarm というパッケージを導入するのが簡単だ。 まず、インストールする（既にインストール済みなら、このコマンドは実行しなくてよい）。\n\ninstall.packages(\"ggbeeswarm\")\n\nインストールが済んだら、パッケージを読み込む。\n\nlibrary(ggbeeswarm)\n\nビースウォームプロットは、geom_beeswarm()またはgeom_quasirandom() で描く。 これら二つの違いは、点の散らし方である。実際に作って比べてみよう。\n\nbee1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_beeswarm() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bee1)\n\n\n\n\n\nbee2 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_quasirandom() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bee2)\n\n\n\n\nビースウォームプロットでは、全く同じか近い値をとった観測値が重ならないよう、点を散らして (jittering) くれる。その散らし方が、二つの geom で異なる。\nこれらの図により、分布の中で実際に観測値がどこにあるかが明らかになった。ビースウォームプロットを、箱ひげ図とバイロリンプロットに重ねてみよう。\n\nbee3 <- bv4 + geom_quasirandom()\nplot(bee3)\n\n\n\n\n点のせいで箱ひげ図がの線が見えにくいなら、(1) 点の色を変えるか、(2) 点の透明度を上げてみよう。透明度は alpha で指定する。alpha = 1/3 とすると、点が3つ重なったときに透明度が0（つまり、普通の色）になるなるようになる。\n両方同時にやってみよう。\n\nbee4 <- bv4 + \n    geom_quasirandom(color = \"skyblue\", alpha = 3/5)\nplot(bee4)\n\n\n\n\n男女の点の色を変えてみよう。\n\nbee5 <- bv4 + \n    geom_quasirandom(aes(color = gender),\n                     alpha = 2/3) +\n    scale_color_brewer(palette = \"Dark2\",\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\"))\nplot(bee5)\n\n\n\n\nこれで、分布の形状と五数だけでなく、実際の観測値がどこにあるかまで明らかにできた。\n\n5.5.7 散布図\nここまでは、1つの変数を可視化するグラフを作ってきた。続いて、2変数の関係を可視化してみよう。\n2変数（2つの量的変数）の関係を可視化するための最も基本的な図は散布図 (scatter plot) である。散布図は、geom_point() で作る。散布図のaesには、横軸の変数 x と縦軸の変数 y を指定する。\n数学の点数（横軸）と英語の点数（縦軸）の関係を散布図にしみてよう。\n\nscat1 <- ggplot(myd, aes(x = math, y = english)) +\n    geom_point() +\n    labs(x = \"数学の得点\", y = \"英語の得点\")\nplot(scat1)\n\n\n\n\n英語も数学も100点満点の試験なのに、図が横長になっていて数学の得点の範囲の方が広く見えてしまう。 この点を改善するために、xlim() と ylim() で横軸と縦軸の範囲を指定し、coord_fixed(ratio = 1) で縦横比を1:1にしよう（ratio = 1 はデフォルトなので、単に coord_fixed() でもいいが、比がはっきりわかるようにここでは明示しておく）。\n\nscat2 <- scat1 + \n    xlim(0, 100) + \n    ylim(0, 100) +\n    coord_fixed(ratio = 1)\nplot(scat2)\n\n\n\n\n男女の点を、色 (color) と形 (shape) で区別してみよう。\nまず、色で区別する。\n\nscat3 <- ggplot(myd, \n                aes(x = math,\n                    y = english, \n                    color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) +\n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3)\n\n\n\n\nこれで一応色分けはできたが、色があまり気に入らない。 特に、赤と緑を区別できない人がいると思われるので、scale_color_brewer() で色使い (color paletter) を Accent に変えてみよう。指定できるパレットについては、このページ を参照されたい。\n\nscat3a <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Accent\",\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3a)\n\n\n\n\n色分けができた。試しにもう1つ異なるパレットを作ってみよう。Set1 を使ってみる。\n\nscat3b <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Set1\", \n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3b)\n\n\n\n\n「男は青で女は赤」というステレオタイプ（偶然そうなってしまっただけだが）が気にいらないなら、色を逆にしてみよう。パレットに用意された色を使う順番を、direction = -1 で逆順にできる。\n\nscat3c <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Set1\", \n                       direction = -1,\n                       name = \"性別\",\n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) +\n    coord_fixed(ratio = 1)\nplot(scat3c)\n\n\n\n\n次に、形 (shape) で区別する。\n\nscat4 <- ggplot(myd, \n                aes(x = math, \n                    y = english, \n                    shape = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_shape_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) +\n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat4)\n\n\n\n\n最後に、色と形で区別する。\n\nscat5 <- ggplot(myd, \n                aes(x = math,\n                    y = english,\n                    color = gender,\n                    shape = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\",\n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Accent\", \n                       direction = -1,\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    scale_shape_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat5)\n\n\n\n\nこのように、ggplot2を使えば簡単に綺麗な図を作ることができる。\n慣れるまではggplot2での作図を面倒に感じるかもしれないが、慣れてしまえばggplotが手放せなくなるだろう。"
  },
  {
    "objectID": "intro-to-RStudio.html#sec-projects",
    "href": "intro-to-RStudio.html#sec-projects",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.1 プロジェクトの作成",
    "text": "3.1 プロジェクトの作成\nRStudio にはプロジェクト機能がある。この機能を使うと、プロジェクトの管理が容易になる。ここでは、「統計学1」をプロジェクトの1つと考え、新規プロジェクトを作成してみよう。\n以下のステップを踏めば、プロジェクトが作れる。\n\nコンピュータの自分のファイルが保存できる場所（たとえば、「ドキュメント」）に、この授業（統計学1）用のフォルダ（ディレクトリ； directory）を作る。\n\n\nフォルダ名はアルファベットと数字のみで付ける\nフォルダ名の最初の文字はアルファベットにする\nファルダ名にスペース（空白）を使わない!\nフォルダ名の例: stat2\n\n\n\n\n\n\n\n重要\n\n\n\n大学の情報演習室にあるパソコンを使っている場合は、Zドライブ にフォルダを作る。 授業で説明するので、説明をよく聞くように。説明がよくわからない場合は、担当教員またはSAにその場ですぐに質問しよう。\n\n\n\n上部のメニューで、File -> New Project を選ぶ\nExisting Directory（既存のディレクトリ）を選ぶ\nbrowse（閲覧）を押して、自分が作ったフォルダ（ディレクトリ）を選び、右下の Create Project をクリックする\n\nこれで新しいプロジェクトができる。プロジェクト名（自分で作ったフォルダの名前がそのまま使われる）は RStudioの右上に表示される。\n次回以降、このプロジェクトを開くには、File -> Open Project でこのプロジェクトを選べばよい。\n\n\n\n\n\n\n重要\n\n\n\n大学の情報演習室にあるパソコンを使っている場合は、Zドライブ 経由でプロジェクトを開く必要がある。授業で説明するので、説明をよく聞くように。わからなくなったら、担当教員またはSAにその場ですぐに質問しよう。"
  },
  {
    "objectID": "intro-to-RStudio.html#sec-scripts",
    "href": "intro-to-RStudio.html#sec-scripts",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.2 Rスクリプトの作成と利用",
    "text": "3.2 Rスクリプトの作成と利用\nRのコマンド（命令文）は、RStudio 右側（あるいは左下）の Console に直接打ち込むこともできる。しかし、通常はそのような使い方はしない。代わりに、Rの命令が書かれたファイルを別に作り、その中に命令を記入する。\nRStudio で新しいRスクリプトを作るには、RStudioで 「Cmd/Ctrl + Shift + N」を入力する （あるいはRStudio 上部のメニューで、File -> New File -> R Script の順番で選ぶ）。そうすると、RStudio の左側のウィンドウが上下に2分割されるはずである。このとき、左上に新たに開くのがRスクリプトである。（左下が History の場合は、不要なので最小化する。左下 Console の場合はそのままにする）\nRスクリプトができたら、「Cmd/Ctrl + S」 を押し、名前をつけて保存しよう（名前の付け方はフォルダ名の付け方と同じルールで）。このファイルにRの命令を書き込む。基本的には、1つの行には1つの命令しか書かない。\nこのファイルに書いた命令を実行したいときは、実行したい行にカーソルをおいた状態で、「Cmd/Ctrl + Return/Enter」を押す。すると、命令がConsole に送られ、実行される。"
  },
  {
    "objectID": "intro-to-RStudio.html#sec-comments",
    "href": "intro-to-RStudio.html#sec-comments",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.3 コメントの利用",
    "text": "3.3 コメントの利用\nRスクリプトには、Rに送る命令以外に、自分（あるいは他の人間）用のコメントを書き込むことができる。Rでコメントを書くときは、# [ハッシュ]という記号を使う。Rは、その行で # より後にあるものを無視する。\n\n\n\n\n\n\n注意\n\n\n\n# は半角！\n\n\nたとえば、以下の4行をRで実行すると、2行目と3行目は無視される。\n\na <- c(4, 5, 3, 4, 6, 7, 1, 2, 9)\n# a の標準偏差を求めたい\n# 標準偏差は英語では standard deviation; sd() という関数を使う\nsd(a)\n\n[1] 2.505549\n\n\n\n\n\n\n\n\nヒント\n\n\n\n<- という記号は、「Option/Alt + - [マイナス] 」で入力する。\n\n\nスクリプトに命令だけ書いても、命令の意味を忘れてしまったり、自分がなぜその命令を書いたのか後でわからなくなったりするので、どんどんコメントを書き込もう。\n\n\n\n\n\n\n重要\n\n\n\nコメントは人の為ならず：コメントを残しておくことで、未来の自分に感謝される！"
  },
  {
    "objectID": "descriptive-stat.html#sec-1var",
    "href": "descriptive-stat.html#sec-1var",
    "title": "\n4  記述統計\n",
    "section": "\n4.1 1変数の記述統計とデータの可視化",
    "text": "4.1 1変数の記述統計とデータの可視化\n\n4.1.1 パッケージの読み込み\nまず、この授業で頻繁に（ほぼ毎回）使う、tidyverseパッケージを使ってみよう。\nインストールしよう。既にインストール済みなら再度インストールする必要はない。割と時間がかかるので注意。\n\n\n\n\n\n\n重要\n\n\n\nこの説明は、大学の情報演習室を使うことを想定して書いている。 自分のパソコンを使っている場合は、まず以下の作業が必要である。この作業を大学の情報演習室で行ってはいけない（すべてのパッケージがインストール済みである）。\n\npkgs <- c(\"tidyverse\", \n          \"sytemfonts\",\n          \"shiny\",\n          \"miniUI\",\n          \"DT\",\n          \"patchwork\",\n          \"remotes\")\ninstall.packages(pkgs)\nremotes::install_github(\"Gedevan-Aleksizde/fontregisterer\", \n                        upgrade = \"never\")\n\n\n\nパッケージの読み込みには、library() を使う。パッケージの読み込みは、R (RStudio) を起動するたびに行う必要がある。つまり、library() はそのパッケージを使う場合には毎回実行する必要がある。また、複数の qmd で同じパッケージを使う場合には、それぞれの qmdファイルにlibrary() でパッケージを読み込む命令を書いておく必要がある（qmd ファイルについては 6章 で説明する）。\n\nlibrary(tidyverse)\n\n図中の日本語が文字化けすることがあるので、OSに合わせてフォントを指定する以下のコードを実行する。 大学のパソコンはWindowsなので、Windows用のコードのみ実行する。\nWindows ユーザ（大学PCを含む）は、\n\nlibrary(fontregisterer)\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"Yu Gothic\"))\n\nを実行する。\nLinux ユーザ（IPAexフォント が利用可能である場合）は、\n\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"IPAexGothic\"))\n\nを実行する。\nmacOS ユーザは、\n\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"HiraginoSans-W3\"))\n\nを実行する。\n\n\n\n\n\n\n備考\n\n\n\n利用可能なフォントは、library(fontregisterer) を実行した後（Linuxでは実行しなくて良い）に、自分のOSにあわせて以下のいずれかを実行することで確認できる。\n\n# Linux\nsystemfonts::system_fonts()$family\n\n\n# macOS\nlibrary(fontregisterer)\nnames(quartzFonts())\n\n\n# Windows\nlibrary(fontregisterer)\nnames(windowsFonts())\n\n\n\n\n4.1.2 データセットの読み込み\n今回の実習で利用するデータをダウンロードしよう。 準備として、現在利用しているプロジェクト（上で作ったフォルダ）の中に、data という名前のフォルダを作ろう。\n\ndir.create(\"data\")\n\n次にデータセット fake_data_01.csv をダウンロードし、今作った data フォルダの中に保存する。\n\ndownload.file(\n  url = \"https://yukiyanai.github.io/jp/classes/stat1/data/fake_data_01.csv\",\n  destfile = \"data/fake_data_01.csv\")\n\nダウンロードがうまくいかない（あるいは、次の読み込み段階で失敗する）場合は、ファイル (fake_data_01.csv) をここ から手動でダウンロードして、プロジェクト内の data ディレクトリに移動する。\nこのデータは CSVと呼ばれる形式で保存されているので、readr::read_csv()という関数を使ってこのデータセットを読み込むことができる（他の形式で保存されたデータの使い方は必要に応じて後の授業で解説する）。\nこのデータセットを myd という名前で利用することにしよう（これはデータセットのファイル名を変えるのではなく、R上での呼び名を決めているだけである）。\n\nmyd <- read_csv(\"data/fake_data_01.csv\")\n\n読み込んだデータの中身を確認してみよう。 次のコマンドを打ち込むと、スプレッドシート（Excelの表のようなもの）上にデータが表示される。\n\nView(myd)\n\n確認できたら、スプレッドシートが表示されているタブを閉じる。\n次に、コンソール上に、データセットの最上部または最下部にある数行分だけを表示してみよう。\n\nhead(myd)          # 行数を指定しないと6行分\n\n# A tibble: 6 × 6\n     id gender   age height weight  income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>   <dbl>\n1     1 male      52   174    63.1 3475810\n2     2 male      33   175.   70.2  457018\n3     3 male      22   175    82.6 1627793\n4     4 male      33   170.   81.8 6070642\n5     5 male      26   167.   51.2 1083052\n6     6 male      37   159.   57.8 2984929\n\ntail(myd, n = 8)   # 最後の8行分\n\n# A tibble: 8 × 6\n     id gender   age height weight   income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>    <dbl>\n1    93 female    61   159.   46.5  4025250\n2    94 female    60   166.   62.2  6300194\n3    95 female    21   165.   56.3  1339138\n4    96 female    65   161.   46.8  6127136\n5    97 female    45   161.   48.7  1062663\n6    98 female    53   166.   64.2 10154200\n7    99 female    43   158.   48.5  8287163\n8   100 female    48   154.   42    1125390\n\n\nデータセットに含まれる変数名を確認したいときは、\n\nnames(myd)\n\n[1] \"id\"     \"gender\" \"age\"    \"height\" \"weight\" \"income\"\n\n\nとする。\nデータセットに含まれる観測数 (\\(n\\)) と変数の数を知りたいときは、\n\ndim(myd)\n\n[1] 100   6\n\n\nとする。最初の数字が\\(n\\)の数（データセットの行数）、2番目の数字が変数の数（列数）である（RStudio を使うと、右上のウィンドウの”Environment” というタブにこの情報が既に表示されているので、そこで確認してもよい）。\nまた、データセットの確認には、glimpse() も便利である。\n\nglimpse(myd)\n\nRows: 100\nColumns: 6\n$ id     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …\n$ gender <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\",…\n$ age    <dbl> 52, 33, 22, 33, 26, 37, 50, 30, 62, 51, 55, 36, 66, 42, 36, 47,…\n$ height <dbl> 174.0, 175.3, 175.0, 170.1, 167.4, 159.3, 173.3, 162.5, 160.2, …\n$ weight <dbl> 63.1, 70.2, 82.6, 81.8, 51.2, 57.8, 68.6, 47.2, 68.2, 59.4, 66.…\n$ income <dbl> 3475810, 457018, 1627793, 6070642, 1083052, 2984929, 1481061, 1…\n\n\nデータセットに含まれるすべての変数の基本的な統計量を確認したいときは、\n\nsummary(myd)\n\n       id            gender               age            height     \n Min.   :  1.00   Length:100         Min.   :20.00   Min.   :148.0  \n 1st Qu.: 25.75   Class :character   1st Qu.:36.00   1st Qu.:158.1  \n Median : 50.50   Mode  :character   Median :45.00   Median :162.9  \n Mean   : 50.50                      Mean   :45.96   Mean   :163.7  \n 3rd Qu.: 75.25                      3rd Qu.:57.25   3rd Qu.:170.2  \n Max.   :100.00                      Max.   :70.00   Max.   :180.5  \n     weight          income        \n Min.   :28.30   Min.   :  240184  \n 1st Qu.:48.95   1st Qu.: 1343679  \n Median :59.95   Median : 2987818  \n Mean   :59.18   Mean   : 4343425  \n 3rd Qu.:67.33   3rd Qu.: 6072696  \n Max.   :85.60   Max.   :23505035  \n\n\nとする。\n\n4.1.3 基本的な統計量の計算\n基本的な統計量の計算方法を学習しよう。Rにはよく使われる統計量を計算するための関数があらかじめ用意されているので、関数を利用する。Rの関数の基本的な形は、関数名() である。この () の中に何を書くべきかは、関数によって異なる。Rの関数の使い方を身につけるためには、() の中身を適切に指定できるようになることが必要である。() の中身は関数の引数（ひきすう; arguments）と呼ばれる。\n\n\n\n\n\n\n備考\n\n\n\n引数には仮引数 (paramter) と実引数 (argument) という区別があるが、現時点では深入りしないことにする。気になる場合は、この説明 を参照されたい。\n\n\n私たちが利用しているデータセット myd に含まれる height（身長）という変数 (variable) の平均値（算術平均; mean）を求めよう。Rでは、mean(変数名)とすると、平均値が求められる。\nただし、height という変数は myd というデータの一部（1つの変数, 1つの列）なので、それをRに伝える必要がある。データセットの中身の変数を使うときは、$ マークを使って、データセット名$変数名とすればよい。よって、height の平均値は\n\nmean(myd$height)\n\n[1] 163.746\n\n\nである。\n次に、身長の中央値 (median) を求めよう。中央値は median() で求められるので、\n\nmedian(myd$height)\n\n[1] 162.9\n\n\nである。\n続いて、身長の分散 (variance) を求めよう。分散（より正確には、不偏分散）は、var()で求める。したがって、\n\nvar(myd$height)\n\n[1] 59.16574\n\n\nである。\n今度は、標準偏差 (standard deviation) を求めよう。標準偏差は、sd() で計算できるので、\n\nsd(myd$height)\n\n[1] 7.691927\n\n\nである。また、標準偏差は分散の平方根 (square root) なので、sqrt() を使って、\n\nsqrt(var(myd$height))\n\n[1] 7.691927\n\n\nとしても、sd() を使った場合と同じ結果が得られる。\n次に、範囲 (range)を求めよう。最大値は max()、最小値は min() で求められるので、範囲は\n\nmax(myd$height) - min(myd$height)\n\n[1] 32.5\n\n\nである。range() という関数もあるが、この関数の結果は\n\nrange(myd$height)\n\n[1] 148.0 180.5\n\n\nとなり、区間が表示されるので注意が必要である。\n続いて、四分位範囲 (interquartile range; IQR) を求めよう。IQR() を使う。\n\nIQR(myd$height)\n\n[1] 12.075\n\n\nちなみに、第1四分位数すなわち25パーセンタイルは quantile() 関数を使って求めることができる。\n\n(q1 <- quantile(myd$height, prob = 0.25))\n\n  25% \n158.1 \n\n\n同様に第3四分位数すなわち75パーセンタイルは、\n\n(q3 <- quantile(myd$height, prob = 0.75))\n\n    75% \n170.175 \n\n\nである。第3四分位数から第1四分位数を引くと、\n\nq3 - q1\n\n   75% \n12.075 \n\n\nとなり、先ほどIQR()求めた四分位範囲と一致することが確認できる。\nquantile() を使うと、自分の好きなパーセンタイルを求めることができる。 例として、22パーセンタイルと77パーセンタイル、87パーセンタイルを同時に求めてみよう。\n\nquantile(myd$height, prob = c(0.22, 0.77, 0.87))\n\n    22%     77%     87% \n157.678 170.869 172.726 \n\n\nこれを使えば、身長 height の五数要約 (five-number summary) を表示することができる。次のようにすればよい。\n\nquantile(myd$height, prob = c(0, 0.25, 0.5, 0.75, 1))\n\n     0%     25%     50%     75%    100% \n148.000 158.100 162.900 170.175 180.500 \n\n\n五数要約のための関数 fivenum() を使うこともできる。\n\nfivenum(myd$height)\n\n[1] 148.00 158.10 162.90 170.25 180.50\n\n\n（一部の結果が四捨五入されていることを除けば）同じ結果が得られた。\n課題\n\n体重 (weight) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n所得 (income) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n\n4.1.4 変数の可視化\n変数の特徴は統計量によってある程度把握することができるが、統計量だけではわかりにくい特徴もある。そこで、データ分析を行う際には、図を作って自分が持っているデータを可視化するという作業が必要かつ重要である。\n今日は、ggplot2パッケージを使って、簡単な図をいくつか作ってみよう。ggplot2は先ほど読み込んだ tidyverse の一部なので、新たに読み込む必要はない。また、ggplot2の詳しい使い方は5章」で解説する。 ここではコードの中身まで理解しなくてもよい。\nまず、最も基本的かつよく使う図であるヒストグラム　(histogram) を作ってみよう。 ggplot2では geom_histogram() でヒストグラムを作ることができる。\n例として、身長のヒストグラムを描いてみよう。\n\nhist_h <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\")\nplot(hist_h)\n\n\n\n\nこれでとりあえずヒストグラムが描ける。\nこのヒストグラムを元にして、様々なカスタマイズが可能である。例えば、横軸と縦軸のラベル (label) を変えたいときは、次のように labs()を加える。\n\nhist_h2 <- hist_h + \n    labs(x = \"身長 (cm)\", \n         y = \"度数\")\nplot(hist_h2)\n\n\n\n\nビン（ヒストグラムの棒）の色を変えたいときは、geom_histogram() で fill を指定する。 指定可能な色については このページ を参照。\n\nhist_h3 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", \n                 fill = \"dodgerblue\") +\n  labs(x = \"身長 (cm)\", \n       y = \"度数\")\nplot(hist_h3)\n\n\n\n\nヒストグラムのビンの幅は、binwidth で指定できる。\n\nhist_h4 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", \n                 fill = \"royalblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", \n       y = \"度数\")\nplot(hist_h4)\n\n\n\n\nヒストグラムの縦軸を度数 (frequency, count) ではなく確率密度 (probability density) に変えたいときは、y軸に after_stat(density) を指定する。\n\nhist_h5 <- ggplot(myd, aes(x = height, y = after_stat(density))) +\n  geom_histogram(color = \"black\", \n                 fill = \"dodgerblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", \n       y = \"確率密度\")\nprint(hist_h5)\n\n\n\n\n課題\n\n体重 (weight) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。\n所得 (income) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。"
  },
  {
    "objectID": "descriptive-stat.html#sec-2var",
    "href": "descriptive-stat.html#sec-2var",
    "title": "\n4  記述統計\n",
    "section": "\n4.2 2変数の記述統計とデータの可視化",
    "text": "4.2 2変数の記述統計とデータの可視化\n\n4.2.1 2つの量的変数の関係を図示する\n2つの量的変数の関係は、散布図 (scatter plot) で確認する。ここでは、身長 (height) と体重 (weight) の関係を図示してみよう。ggplot2では、geom_point() で散布図ができる。\n\nscat <- ggplot(myd, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(x = \"身長 (cm)\", y = \"体重 (kg)\")\nplot(scat)\n\n\n\n\nこのデータセットに含まれる身長と体重の間には、どのような関係があるだろうか？\n\n4.2.2 2つの量的変数の関係を統計量で示す\n2つの量的変数の関係を表すのにもっともよく使われるのは、相関係数 (correlation coefficient) である。この統計量は、\\(r\\) で表されることが多い。\\(-1 \\leq r \\leq 1\\)となる。\\(a\\)と\\(b\\) という2つの変数があったとき、\\(a\\)が大きくなるほど\\(b\\) も大きくなるという関係があるとき、「\\(a\\)と\\(b\\)には正の相関 (positive correlation) がある」と言い、このとき \\(r > 0\\) である。また、\\(a\\)が大きくなるほど\\(b\\) が小さくなるという関係があるとき、「\\(a\\)と\\(b\\)には負の相関 (negative correlation) がある」と言い、このとき \\(r < 0\\) である。\\(r = 0\\) のとき、「\\(a\\)と\\(b\\)に相関関係はない」と言う。\n正の相関があるとき、\\(r\\)が\\(1\\)に近いほど、その関係は強い。また、負の相関があるとき、\\(r\\)が\\(-1\\)に近いほど、その関係は強い。つまり、相関関係は、相関係数の絶対値が1に近いほど強い。\nRで相関係数を求めるときは、cor()を使う。身長と体重の相関係数は、\n\ncor(myd$height, myd$weight)\n\n[1] 0.7294207\n\n\nである。この2変数にはどんな関係があるだろうか？\n\n4.2.3 散布図と相関係数\n2つの量的な変数の関係を調べるときは、散布図と相関係数の両者を使ったほうがよい。\n散布図だけを使うと、本当は存在しない関係を、誤って見つけてしまうことがある。例えば、本当は相関がない2つの変数の散布図を描いたとき、描かれた点がなんとなく右肩上がりの直線の周りに集まっているように見えてしまうことがある。これは、人間がパタンを見つける能力に優れている（優れ過ぎている？）からだと考えられる。偶然できた壁のシミが人間の顔に見えてしまうことがあるというのも似たような現象である。\n散布図だけに頼ると、存在しないパタンが見えてしまうことがあるので、散布図で発見したパタンが本当にあるかどうか、相関係数を求めて確かめるべきである。\n反対に、相関係数だけに頼るのも危険である。相関係数は、2変数のあらゆる関係を捉えられるわけではない。相関係数が示すのは、2つの変数の直線的な関係だけである。\n例として、\\(x\\) と\\(y\\) という2つの変数を以下のとおり作り、相関係数を計算してみよう。\n\nx <- -10:10\ny <- x ^ 2\ncor(x, y)\n\n[1] -5.470844e-17\n\n\n2変数と\\(x\\)と\\(y\\)の相関係数は（ほぼ）0である。相関係数だけに頼ると、2つの変数の間には関係がないと言う結論が出せそうである。しかし、相関係数が低くても、必ず散布図を描いたほうがよい。散布図を作ってみよう。\n\nnewd <- tibble(x = x, y = y)\nscat2 <- ggplot(newd, aes(x = x, y = y)) +\n  geom_point()\nplot(scat2)\n\n\n\n\nこの図を見て、\\(x\\)と\\(y\\)は無関係と言えるだろうか？\n散布図から明らか（\\(y\\)をどのように作ったかを思い出せばもっと明らかだが）なように、\\(x\\)と\\(y\\)には強い関係がある（\\(y\\)は\\(x\\)の関数である）。しかし、その関係は曲線的 なので、直線的な関係しか捉えられない相関係数は、強い関係を見落としてしまうのである。\n\n\n\n\n\n\n重要\n\n\n\n2つの量的変数の関係を調べるときは、散布図と相関係数の両方を確認する習慣を身につけよう。\n\n\n2つの変数の関係について調べる方法の詳細については、「統計学2」（3Qに開講）で扱う予定である。"
  },
  {
    "objectID": "intro-to-quarto.html",
    "href": "intro-to-quarto.html",
    "title": "6  Quarto 入門",
    "section": "",
    "text": "準備中"
  },
  {
    "objectID": "discrete-distributions.html",
    "href": "discrete-distributions.html",
    "title": "7  離散分布",
    "section": "",
    "text": "準備中"
  },
  {
    "objectID": "continuous-distributions.html",
    "href": "continuous-distributions.html",
    "title": "8  連続分布",
    "section": "",
    "text": "準備中"
  },
  {
    "objectID": "rv-n-dist.html",
    "href": "rv-n-dist.html",
    "title": "9  確率変数と確率分布",
    "section": "",
    "text": "準備中"
  },
  {
    "objectID": "stat-dist.html",
    "href": "stat-dist.html",
    "title": "10  確率分布の代表値",
    "section": "",
    "text": "準備中"
  }
]